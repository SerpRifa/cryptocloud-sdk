/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */

import { CryptocloudClient } from '../dist/index.js';

async function staticWalletExample() {
  console.log('=== –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–æ—à–µ–ª—å–∫–æ–º ===');
  
  const client = new CryptocloudClient({
    apiKey: process.env.CC_API_KEY!,
    apiSecret: process.env.CC_API_SECRET!,
    logger: {
      info: (msg, meta) => console.log(`[INFO] ${msg}`, meta),
      error: (msg, err) => console.error(`[ERROR] ${msg}`, err),
      warn: (msg, meta) => console.warn(`[WARN] ${msg}`, meta),
      debug: (msg, meta) => console.debug(`[DEBUG] ${msg}`, meta),
    }
  });

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è USDT
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞...');
    const wallet = await client.createStaticWallet({
      currency: 'USDT',
      description: '–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤'
    });

    console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω:', {
      id: wallet.id,
      currency: wallet.currency,
      address: wallet.address,
      description: wallet.description,
      createdAt: wallet.createdAt
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ...');
    const walletInfo = await client.getStaticWallet(wallet.id);
    console.log('üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ:', {
      id: walletInfo.id,
      address: walletInfo.address,
      qrCode: walletInfo.qrCode ? 'QR –∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω' : 'QR –∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è BTC
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è BTC...');
    const btcWallet = await client.createStaticWallet({
      currency: 'BTC',
      description: 'Bitcoin –∫–æ—à–µ–ª–µ–∫'
    });

    console.log('‚úÖ Bitcoin –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω:', {
      id: btcWallet.id,
      address: btcWallet.address,
      currency: btcWallet.currency
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤...');
    const wallets = await client.listStaticWallets();
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${wallets.total} –∫–æ—à–µ–ª—å–∫–æ–≤:`);
    wallets.wallets.forEach((w, index) => {
      console.log(`  ${index + 1}. ${w.currency} - ${w.address} (${w.id})`);
    });

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    console.log('\n5. –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:');
    console.log('üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—à–µ–ª–µ–∫:');
    console.log('   - –ü–æ–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã');
    console.log('   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR –∫–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π');
    console.log('   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å —Ä–µ–≥—É–ª—è—Ä–Ω–æ');

    console.log('\nüì± –ü—Ä–∏–º–µ—Ä HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:');
    console.log(`
<div class="wallet-info">
  <h3>–û–ø–ª–∞—Ç–∞ ${wallet.currency}</h3>
  <p>–ê–¥—Ä–µ—Å: <code>${wallet.address}</code></p>
  <img src="${wallet.qrCode}" alt="QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã" />
  <p>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å</p>
</div>
    `);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ NestJS —Å–µ—Ä–≤–∏—Å–µ
export const nestjsStaticWalletExample = `
import { Injectable } from '@nestjs/common';
import { CryptocloudService } from '@freeinet/cryptocloud-sdk';

@Injectable()
export class WalletService {
  constructor(private readonly cryptocloud: CryptocloudService) {}

  async createPaymentWallet(currency: string, description: string) {
    const wallet = await this.cryptocloud.createStaticWallet({
      currency,
      description
    });

    return {
      walletId: wallet.id,
      address: wallet.address,
      qrCode: wallet.qrCode,
      currency: wallet.currency
    };
  }

  async getWalletInfo(walletId: string) {
    return this.cryptocloud.getStaticWallet(walletId);
  }

  async getAllWallets() {
    const result = await this.cryptocloud.listStaticWallets();
    return result.wallets.map(wallet => ({
      id: wallet.id,
      currency: wallet.currency,
      address: wallet.address,
      createdAt: wallet.createdAt
    }));
  }
}
`;

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (import.meta.url === \`file://\${process.argv[1]}\`) {
  staticWalletExample().catch(console.error);
}

export { staticWalletExample };
