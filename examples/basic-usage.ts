/**
 * –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CryptocloudClient
 */

import {
    BaseWebhookHandler,
    CachedCryptocloudClient,
    CryptocloudClient,
    CryptocloudConfig,
    MemoryCache,
    WebhookPayload,
    WebhookService
} from '../dist/index.js';

// –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
async function basicExample() {
  console.log('=== –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ===');
  
  const client = new CryptocloudClient({
    apiKey: process.env.CC_API_KEY!,
    apiSecret: process.env.CC_API_SECRET!,
    logger: {
      info: (msg, meta) => console.log(`[INFO] ${msg}`, meta),
      error: (msg, err) => console.error(`[ERROR] ${msg}`, err),
      warn: (msg, meta) => console.warn(`[WARN] ${msg}`, meta),
      debug: (msg, meta) => console.debug(`[DEBUG] ${msg}`, meta),
    }
  });

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
    const invoice = await client.createInvoice({
      amount: 10.50,
      currency: 'USDT',
      description: '–û–ø–ª–∞—Ç–∞ VPN —É—Å–ª—É–≥',
      orderId: `order-${Date.now()}`
    });

    console.log('–°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å:', {
      id: invoice.id,
      amount: invoice.amount,
      currency: invoice.currency,
      status: invoice.status,
      checkoutUrl: invoice.checkoutUrl
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–≤–æ–π—Å–µ
    const invoiceInfo = await client.getInvoice(invoice.id);
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–≤–æ–π—Å–µ:', invoiceInfo);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if (client.isInvoicePaid(invoiceInfo)) {
      console.log('‚úÖ –ò–Ω–≤–æ–π—Å –æ–ø–ª–∞—á–µ–Ω!');
    } else if (client.isInvoiceFailed(invoiceInfo)) {
      console.log('‚ùå –ò–Ω–≤–æ–π—Å –Ω–µ –æ–ø–ª–∞—á–µ–Ω');
    } else {
      console.log('‚è≥ –ò–Ω–≤–æ–π—Å –≤ –æ–∂–∏–¥–∞–Ω–∏–∏');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function cachingExample() {
  console.log('\n=== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===');
  
  const client = new CachedCryptocloudClient({
    apiKey: process.env.CC_API_KEY!,
    apiSecret: process.env.CC_API_SECRET!,
    cache: new MemoryCache()
  });

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const balance = await client.getBalanceWithCache();
    console.log('–ë–∞–ª–∞–Ω—Å:', balance.balances);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const statistics = await client.getStatisticsWithCache({
      startDate: '2024-01-01',
      endDate: '2024-01-31'
    });

    console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      totalInvoices: statistics.totalInvoices,
      paidInvoices: statistics.paidInvoices,
      totalAmount: statistics.totalAmount,
      paidAmount: statistics.paidAmount
    });

    // –†–∞–∑–º–µ—Ä –∫—ç—à–∞
    const cacheSize = client.getCacheSize();
    console.log('–†–∞–∑–º–µ—Ä –∫—ç—à–∞:', cacheSize);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä 3: –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–Ω–≤–æ–π—Å–æ–≤
async function listInvoicesExample() {
  console.log('\n=== –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–Ω–≤–æ–π—Å–æ–≤ ===');
  
  const client = new CryptocloudClient({
    apiKey: process.env.CC_API_KEY!,
    apiSecret: process.env.CC_API_SECRET!
  });

  try {
    const invoices = await client.listInvoices({
      startDate: '2024-01-01',
      endDate: '2024-01-31',
      status: 'paid',
      currency: 'USDT',
      offset: 0,
      limit: 10
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${invoices.total} –∏–Ω–≤–æ–π—Å–æ–≤:`);
    invoices.invoices.forEach(invoice => {
      console.log(`- ${invoice.id}: ${invoice.amount} ${invoice.currency} (${invoice.status})`);
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä 4: Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
class PaymentWebhookHandler extends BaseWebhookHandler {
  async onInvoicePaid(payload: WebhookPayload): Promise<void> {
    console.log(`üí∞ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω: ${payload.amount} ${payload.currency}`);
    console.log(`üìÑ –ò–Ω–≤–æ–π—Å: ${payload.invoiceId}`);
    console.log(`üÜî –ó–∞–∫–∞–∑: ${payload.orderId}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // await this.updateOrderStatus(payload.orderId, 'paid');
  }

  async onInvoiceFailed(payload: WebhookPayload): Promise<void> {
    console.log(`‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –¥–ª—è –∏–Ω–≤–æ–π—Å–∞: ${payload.invoiceId}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
    // await this.notifyUser(payload.orderId, 'payment_failed');
  }

  async onInvoiceCanceled(payload: WebhookPayload): Promise<void> {
    console.log(`üö´ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –∏–Ω–≤–æ–π—Å–∞: ${payload.invoiceId}`);
  }
}

async function webhookExample() {
  console.log('\n=== Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===');
  
  const webhookService = new WebhookService();
  const handler = new PaymentWebhookHandler();
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
  webhookService.registerHandler('invoice.paid', handler);
  webhookService.registerHandler('invoice.failed', handler);
  webhookService.registerHandler('invoice.canceled', handler);

  // –°–∏–º—É–ª—è—Ü–∏—è webhook —Å–æ–±—ã—Ç–∏—è
  const mockWebhookPayload: WebhookPayload = {
    event: 'invoice.paid',
    invoiceId: 'test-invoice-123',
    uuid: 'test-uuid-123',
    status: 'paid',
    amount: 10.50,
    currency: 'USDT',
    createdAt: new Date().toISOString(),
    orderId: 'order-123'
  };

  await webhookService.processWebhook(mockWebhookPayload);
  
  console.log('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', webhookService.getRegisteredEvents());
}

// –ü—Ä–∏–º–µ—Ä 5: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
async function configExample() {
  console.log('\n=== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===');
  
  try {
    const config = CryptocloudConfig.fromEnv();
    console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', {
      baseUrl: config.baseUrl,
      timeoutMs: config.timeoutMs,
      enableMetrics: config.enableMetrics
    });

    const client = new CryptocloudClient(config);
    console.log('–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ env');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
async function runExamples() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CryptocloudClient\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.CC_API_KEY || !process.env.CC_API_SECRET) {
    console.log('‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è CC_API_KEY –∏ CC_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    console.log('   –ü—Ä–∏–º–µ—Ä—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API');
  }

  await basicExample();
  await cachingExample();
  await listInvoicesExample();
  await webhookExample();
  await configExample();
  
  console.log('\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export {
    basicExample,
    cachingExample, configExample, listInvoicesExample, PaymentWebhookHandler, webhookExample
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  runExamples().catch(console.error);
}
